                            +----------------------+
                            | RANGELIST assignment |
                            +----------------------+

Background:
-----------
One can easily create a linked list that represents an array: each node of the linked
list contains the value and index of the array, usually the list is sorted by the index:

pos val 
 +-----+  +-----+  +-----+  +-----+  +-----+
 |0  5 +->|1  3 +->|2  9 +->|3  0 +->|4  4 +->NULL
 +-----+  +-----+  +-----+  +-----+  +-----+

which corresponds to an array:

0 1 2 3 4 index
5 3 9 0 4 values

The benefits of such representation are: faster insert in the middle, cheaper move 
all/some elements to a different array. There are also some cons: finding position 
(index operator) is slow. 

Assignment:
-----------
For this assignment you will implement a more advanced version of the above idea. 
The two main features are:

1) DO NOT store zero values in the list. Assume that is position (index) is not 
in the list, then the corresponding value is 0. For example:

pos val
 +-----+  +-----+
 |0  5 +->|10 4 +->NULL
 +-----+  +-----+

corresponds to an array:

0 1 2 3 4 5 6 7 8 9 10 index
5 0 0 0 0 0 0 0 0 0  4 values

2) the second feature: if adjacent elements are equal (values), then they have to be combined 
into a single node. It will require a different node structure that allows us to specify 
ranges:

struct RangeNode {
  int begin;
  int end;
  int value;
  struct RangeNode * next;
};
/* each node represents a range of equal values from begin to end,
 * similar to STL begin is included and end is NOT
 * Example RangeNode{2,6,3} is
 * 0 1 2 3 4 5 6 7 8 9 index
 * 0 0 3 3 3 3 0 0 0 0 value 
 */

Using this two features we may create very compact linked lists that represent huge arrays:

  b  e  v     b  e  v
 +--------+  +--------+  
 |2  9  2 +->|12 23 3 +->NULL
 +--------+  +--------+  

 represents

 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
 0 0 2 2 2 2 2 2 2 0 0   0  3  3  3  3  3  3  3  3  3  3  3  
     <----------->          <----------------------------->
      1st range                   2nd range

--------------------------------------------------------------------

Discussion:
-----------

start the assignment by implementing only the first feature, assume 
all ranges have length 1: 
[ 4,5 ) 
specifies a range which contains only one index - position 4.

for the first feature (which often called Sparse Vector) 
 - when inserting a value:
 if ( value != 0 ) {
    if ( position exists ) {
      just change the value
    } else {
      create a new node (positions have to be sorted)
    }
 } else { // value is zero
   delete node at position if it exists
 }

example:

  b e v     b e v     b e v
 +------+  +------+  +------+                  0 1 2 3 4 5 6
 |2 3 2 +->|4 5 3 +->|6 7 5 +->NULL    ( array 0 0 2 0 3 0 5 )
 +------+  +------+  +------+  

insert 0 at position 3 - do nothing (delete position 3, but position 3 is empty)

insert 0 at position 4 - delete position 4:
  b e v     b e v
 +------+  +------+                  0 1 2 3 4 5 6
 |2 3 2 +->|6 7 5 +->NULL    ( array 0 0 2 0 0 0 5 )
 +------+  +------+  

insert 7 at position 3:
  b e v     b e v     b e v
 +------+  +------+  +------+                  0 1 2 3 4 5 6
 |2 3 2 +->|3 4 7 +->|6 7 5 +->NULL    ( array 0 0 2 7 0 0 5 )
 +------+  +------+  +------+  

----------------------------------------------------------------

Once you are done with feature 1 (if feature 1 is implemented correctly you 
should get 80% on the assignment). 

To get the remaining 20% and possibly some extra credit you need to implement feature 2.

Feature 2 requires "merging" two nodes if the nodes have the same value and have adjacent positions:

  b e v     b e v    
 +------+  +------+                x       y      z
 |x y V +->|y z V +->   represents V ... V V ... V ...
 +------+  +------+                <-----> <----->
should become simply
  b e v               
 +------+             
 |x z V +->           
 +------+             


Example:
  b e v     b e v     b e v
 +------+  +------+  +------+                  0 1 2 3 4 5 6
 |2 3 2 +->|4 5 3 +->|6 7 5 +->NULL    ( array 0 0 2 0 3 0 5 )
 +------+  +------+  +------+  

insert 2 at position 3: 
  b e v     b e v     b e v
 +------+  +------+  +------+                  0 1 2 3 4 5 6
 |2 4 2 +->|4 5 3 +->|6 7 5 +->NULL    ( array 0 0 2 2 3 0 5 )
 +------+  +------+  +------+  
notice - the only change is end in the first node changes to 4.

---------------------------------------------------------------

When inserting a value that falls into an existing range:

example 1:
non-zero and not-equal-to-the-range-value. Say insert 5 at position 7 
inside a range 5-10 of values 2. You will have to split the range (node) into 3 nodes: 
before insert position, inserty position, after:
   2       value
[5, 10 )   range (I use a sligtly different diagram style)

insert 5 at position 7

  2         5        2      value
[5,7) ->  [7,8) -> [8,10)   range (I use a sligtly different diagram style)

using old diagram style:
  b e  v    
 +-------+              5 6 7 8 9
 |5 10 2 +    repreents 2 2 2 2 2
 +-------+  

insert 5 at position 7

  b e v     b e v     b e v
 +------+  +------+  +-------+                    5 6 7 8 9
 |5 7 2 +->|7 8 5 +->|8 10 2 +->NULL    repreents 2 2 5 2 2
 +------+  +------+  +-------+  

notice that if insert happens in the first or last position of the range, then "before"
or "after" ranges may be empty.

example 2: insert 0 in the middle of an existing range:
insert 0 at position 5 of existing range [2,9) splits it into two ranges
[2,5) and [6,9)

example 3: insert a value same that in the range at a position right before first, or right 
after last. Just decrement the begin or increment the end:
[2,7) insert at position 7 =>  [2,8)
[2,7) insert at position 1 =>  [1,8)

example 4: after expanding (see example 3) one of the ranges, the range become next to another
range with the same value, merge the 2 ranges:
[2,5) -> [6,9) 
insert at position 5: either increment the end of the first range or derement begin of the second range,
but you will get two ranges to become next to each other:
[2,6) -> [6,9) (I incremented the end of the first range)
now merge
[2,9)
into a single node.


Comments:
---------
There many (special) cases in this assignment. Make sure to have a clean and detailed 
plan before you start programming. I will advise TAs to ask for that plan before they
start helping you. It is very easy to end up with extremely messy logic (and code) if
you just sit in front of the monitor and program "on the fly". Here is my high-level 
plan. Notice that this a the FINAL cases, it does not explain logic that will find out
which of this cases to use (see below)

  /* cases:
   * NON-zero value - insert
   * insert value is NEXT to a range of same values      => just MODIFY the range (extend)
   * insert value is NEXT to a range of diff values      => insert as a NEW NODE with a range of size 1
   * insert value is NOT next to any range               => insert as a NEW NODE with a range of size 1
   * insert value is in the MIDDLE of the existing range =>
   *              case 1) value of the range is the same => do nothing
   *              case 2) value is different             => SPLIT range into 3 ranges (before, position, after)
   *                                                        the before and/or after ranges may be empty
   * SPECIAL CASE:
   * after expanding (cases when insert position is NEXT to an existing range, 2 ranges may need to be merged
   * if there are 2 ranges [a,b) and [b,c) they should be merged into a single [a,c)
   *
   * ZERO value (delete)
   * delete a position that is FIRST OR LAST in a range => just MODIFY the range
   * delete a position that is the MIDDLE of a range    => SPLIT range in two (before and after)
   * delete a position that us NOT in a range           => do nothing 
   */

I used several helper functions to make code more readable: 

int helper_insert_between_nodes
int helper_insert_middle       
int helper_insert_before_begin 
int helper_insert_after_end    
int check_merge                
int insert_value_in_front      


Note that I did not list cases related to inserts/deletes in empty list or in-front of the list.

Note that your logic may be different and end up with different set cases (some of the cases above may
be combined, or otherwise). 
-----------------------------------------------------------------------

Another diagram that may help is the decision tree. It specifies the logic that figures out which 
special case we are dealing with.

Notice that one may have logic like this (table style)
if ( q1 && q2 && q3 )   then special case 1
if ( q1 && q2 && !q3 )  then special case 2
if ( q1 && !q2 )        then special case 3
if ( !q1 )              then special case 4

but it can also be rewritten more efficiently (decision tree):

if ( q1 ) {
  if ( q2 ) {
    if ( q3 ) {
      case 1
    } else {
      case 2
    }
  } else {
    case 3
  }
} else {
  case 4
}

I stronly recomment a decision tree on paper like this:


                                       question 1 
                                    /              \
                                yes/                \no
                                  /                  \
                             question 2                   question 3 
                           /            \               /            \
                       yes/              \no        yes/              \no
                         /                \           /                \
                 question 4            empty       delete            merge
               /            \           list        mode             nodes
           yes/              \no
             /                \
           insert          split          
           in front         node
